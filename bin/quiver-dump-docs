#!/usr/bin/env perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use Getopt::Long::Descriptive;

use Quiver;
use Quiver::Source;
use Quiver::Schema;
use Quiver::Backend::Ctags;
use Quiver::Backend::RegexpCommon;
use Quiver::Runner;

use SQL::Translator;

my ($opt, $usage) = describe_options(
	"$0 %o <source dir/files...>",
	[ 'db|d=s',     "database file", { required => 1  } ],
	[],
	[ 'verbose|v',  "print extra stuff"                 ],
	[ 'scan',       "scan the files"                    ],
	[ 'extract',    "extract comments"                  ],
	[ 'help|h|?',   "print usage message and exit"      ],
);
print($usage->text), exit if $opt->help;

my $src = Quiver::Source->new();
$src->add( @ARGV );

my $schema = Quiver::Schema->connect('dbi:SQLite:dbname='. $opt->db,
	'', '',
	{},
	{ on_connect_call => 'use_foreign_keys' });
unless( -f $opt->db ) {
	$schema->deploy;
}

if( $opt->scan ) {
	my $symbols = Quiver::Backend::Ctags->new( source => $src );
	my $comments = Quiver::Backend::RegexpCommon->new( source => $src );

	my $runner = Quiver::Runner->new( schema => $schema );
	$runner->add_backend($symbols, $comments);

	$runner->scan;
}
if( $opt->extract ) {
	# TODO
	# find all comments that minimize the difference between the line
	# end and a symbol line start and are in the same file
	my @functions = 
	$schema->resultset('DocumentationMatch')->search(
		{} 
	)->all;
	my $first = $functions[0];
	use DDP; p $first;
	use DDP; p $first->comment_symbol;
	use DDP; p $first->function_symbol;
	#use DDP; p @functions;
}

# PODNAME: quiver-dump-docs
# ABSTRACT: one line description TODO

=pod

=head1 SYNOPSIS

  quiver-dump-docs /usr/include

=head1 DESCRIPTION

TODO

